#!/bin/bash

# Log filename
logfile="nginx-access.log"

# === Process the log file ===
# 5 top IP - I had to sort before uniq -c. Thanks to gemini.google.com
echo "Top 5 IP addresses with the most requests:"
sort "$logfile" | cut -d " " -f1 | uniq -c | sort -k1,1nr | head -5 | awk '{print $2, "\t-", $1, "requests"}'

# 5 top paths
printf "\nTop 5 most requested paths:\n"
perl -ne 'if (/\"\S+ (\S+)/) { print "$1\n"; }' "$logfile" | sort | uniq -c | sort -rn | head -5 | sed -E 's/\s*([^ ]+)\s+([^ ]+).*/\2 - \1 requests/'

# 5 top status code
printf "\nTop 5 response status codes:\n"
sed -n 's/.*\s\([0-9]\{3\}\)\s.*/\1/p' "$logfile" | sort | uniq -c | sort -rn | head -5 | sed -E 's/\s*([^ ]+)\s+([^ ]+).*/\2 - \1 requests/'

# ==== To try ====

# input to choose the input log files
# invert nb request and info or calculate length before to manage alignement

# Regex to split lines from logs - Thanks to https://regex101.com/
# regex_split='/^\s*([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})[^\[]+(\[[^\]]+\])[^"]+("[^"]+")\s+([0-9]+)\s+([0-9]+)[^"]+("[^"]+")[^"]+("[^"]+")/'
# maybe use perl to choose the column i need

# [[ "$logfile" =~ $regex_split ]]
# echo "${BASH_REMATCH[1]}"